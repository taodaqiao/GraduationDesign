#ifndef _FIND_SYMBOL_H
#define _FIND_SYMBOL_H

#include <windows.h>
#include <iostream>
#include <map>
#define IOCTL_PASSPG          CTL_CODE(FILE_DEVICE_UNKNOWN,0x909,METHOD_BUFFERED,FILE_ANY_ACCESS) 
#define IOCTL_UNPASSPG          CTL_CODE(FILE_DEVICE_UNKNOWN,0x910,METHOD_BUFFERED,FILE_ANY_ACCESS) 
#define IOCTL_INIT_TABLE      CTL_CODE(FILE_DEVICE_UNKNOWN,0x911,METHOD_BUFFERED,FILE_ANY_ACCESS) 
#define IOCTL_INIT_HOOK_TABLE      CTL_CODE(FILE_DEVICE_UNKNOWN,0x912,METHOD_BUFFERED,FILE_ANY_ACCESS) 
#define IOCTL_ADD_DEBUGGER			CTL_CODE(FILE_DEVICE_UNKNOWN,0x913,METHOD_BUFFERED,FILE_ANY_ACCESS) 
#define IOCTL_DESTORY_PROTECT		CTL_CODE(FILE_DEVICE_UNKNOWN,0x914,METHOD_BUFFERED,FILE_ANY_ACCESS) 

#define IOCTL_Read						   CTL_CODE(FILE_DEVICE_UNKNOWN,0x905,METHOD_BUFFERED,FILE_ANY_ACCESS) 
#define IOCTL_Write						   CTL_CODE(FILE_DEVICE_UNKNOWN,0x906,METHOD_BUFFERED,FILE_ANY_ACCESS) 

typedef struct _SYSTEM_MODULE_INFORMATION_ENTRY
{
	ULONG Unknow1;
	ULONG Unknow2;
	ULONG Unknow3;
	ULONG Unknow4;
	PVOID Base;
	ULONG Size;
	ULONG Flags;
	USHORT Index;
	USHORT NameLength;
	USHORT LoadCount;
	USHORT ModuleNameOffset;
	char ImageName[256];
} SYSTEM_MODULE_INFORMATION_ENTRY, *PSYSTEM_MODULE_INFORMATION_ENTRY;


typedef struct _SYSTEM_MODULE_INFORMATION
{
	ULONG Count;//内核中以加载的模块的个数
	SYSTEM_MODULE_INFORMATION_ENTRY Module[1];
} SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;

typedef NTSTATUS(*ZWQUERYSYSTEMINFORMATION)
(
	IN ULONG SystemInformationClass,
	OUT PVOID SystemInformation,
	IN ULONG Length,
	OUT PULONG ReturnLength
);

typedef struct _init_variable_table {
	PVOID	DbgkDebugObjectType;  //系统原始调试对象类型
	PVOID	ObTypeIndexTable;    //系统对象类型表，当类型名冲突时用到
	PVOID	PsResumeThread;		  //唤醒线程函数
	PVOID	ObDuplicateObject;
	PVOID	PsGetNextProcessThread;
	PVOID	DbgkpPostFakeThreadMessages;
	PVOID	DbgkpPostModuleMessages;
	PVOID	DbgkpWakeTarget; //应该是DbgkpWakeTarget系统原始版本
	PVOID	KeFreezeAllThreads;
	PVOID	KeThawAllThreads;
	PVOID	SwapContext_PatchXRstor;
	//PVOID	ExpLookupHandleTableEntry;
}init_variable_table, *p_init_variable_table;



typedef struct _init_hook_table {
	PVOID NtCreateDebugObject;
	PVOID NtWaitForDebugEvent;
	PVOID NtDebugContinue;
	PVOID NtDebugActiveProcess;
	PVOID NtRemoveProcessDebug;
	PVOID DbgkForwardException;
	//DbgkpSetProcessDebugObject
	PVOID DbgkCopyProcessDebugPort;
	PVOID DbgkOpenProcessDebugPort;
	//DbgkUnMapViewOfSection
	//DbgkMapViewOfSection
	PVOID DbgkpQueueMessage;
	PVOID ObpCallPreOperationCallbacks;
	PVOID RtlpCopyLegacyContextX86;
	PVOID SwapContext;
	PVOID NtResumeThread;
	//PVOID NtReadVirtualMemory;
	//PVOID NtWriteVirtualMemory;
	//PVOID NtQueryInformationThread;
	//PVOID _PsLookupProcessByProcessId; //该函数已经导出，但是为了统一都写在此
	PVOID KiDispatchException;

}init_hook_table, *p_init_hook_table;


//拉取符号，要有symsrv.dll 和dbghelp.dll symsrv.yes
bool InitEnumSymbols();


extern init_variable_table init_table;

extern HANDLE m_hDevice;

//extern std::map<std::string, SIZE_T> variable_addr_table;

extern init_hook_table hook_addr_table;







//#define Hookpage		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x650, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define Unhookpage		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x651, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define TargetHookAddress		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x652, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define TargetProcessId		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x653, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define ISrecv		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x654, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//
//#define IOCTL_notiyenable		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_ObDuplicateObject		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x907, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_KiSaveDebugRegisterState  	CTL_CODE(FILE_DEVICE_UNKNOWN, 0x917, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_KiUmsCallEntry		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x918, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_KiSystemServiceExit		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x919, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_KeGdiFlushUserBatch		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x920, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_KiSystemServiceRepeat		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x921, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_KeServiceDescriptorTable		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_KeServiceDescriptorTableShadow		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x805, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_KiSystemServiceCopyEnd		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x922, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_DbgkDebugObjectType		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x923, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_DbgkpPostFakeThreadMessages		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x893, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_DbgkpPostModuleMessages		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x897, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_KeFreezeAllThreads		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x901, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_PsResumeThread		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x811, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_KeThawAllThreads		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x902, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_PsGetNextProcessThread		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x885, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_PsSuspendThread		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x924, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_LpcRequestWaitReplyPortEx CTL_CODE(FILE_DEVICE_UNKNOWN, 0x925, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_DbgkpProcessDebugPortMutex CTL_CODE(FILE_DEVICE_UNKNOWN, 0x889, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define  IOCTL_KiConvertToGuiThread CTL_CODE(FILE_DEVICE_UNKNOWN, 0x930, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_KiRetireDpcList CTL_CODE(FILE_DEVICE_UNKNOWN, 0x911, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_DbgkCopyProcessDebugPort CTL_CODE(FILE_DEVICE_UNKNOWN, 0x850, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_KiDispatchException CTL_CODE(FILE_DEVICE_UNKNOWN, 0x854, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define  IOCTL_DbgkForwardException CTL_CODE(FILE_DEVICE_UNKNOWN, 0x852, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define  IOCTL_MmGetFileNameForSection CTL_CODE(FILE_DEVICE_UNKNOWN, 0x903, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define  IOCTL_PsGetNextProcess CTL_CODE(FILE_DEVICE_UNKNOWN, 0x931, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_PsTerminateProcess CTL_CODE(FILE_DEVICE_UNKNOWN, 0x932, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_DbgkpSendApiMessage CTL_CODE(FILE_DEVICE_UNKNOWN, 0x934, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//
//
//#define  IOCTL_DbgkOpenProcessDebugPort CTL_CODE(FILE_DEVICE_UNKNOWN, 0x858, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define  IOCTL_DbgkUnMapViewOfSection CTL_CODE(FILE_DEVICE_UNKNOWN, 0x855, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define  IOCTL_DbgkMapViewOfSection CTL_CODE(FILE_DEVICE_UNKNOWN, 0x856, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_ObTypeIndexTable CTL_CODE(FILE_DEVICE_UNKNOWN, 0x933, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_DbgkExitProcess CTL_CODE(FILE_DEVICE_UNKNOWN, 0x862, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_DbgkExitThread CTL_CODE(FILE_DEVICE_UNKNOWN, 0x861, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_ObpCallPreOperationCallbacks		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_ExGetCallBackBlockRoutine		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x898, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_dbgProcessId		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x881, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_DbgkpQueueMessage		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x853, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_DbgkpSetProcessDebugObject CTL_CODE(FILE_DEVICE_UNKNOWN, 0x851, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define  IOCTL_DbgkpPostFakeProcessCreateMessages CTL_CODE(FILE_DEVICE_UNKNOWN, 0x892, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_MmGetFileNameForAddress		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x935, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_PspSystemDlls		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x904, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_DbgkpWakeTarget		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x891, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_NtQueryInformationThread		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x914, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_ExCompareExchangeCallBack		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x936, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_KiRestoreDebugRegisterState		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x937, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_RtlpCopyLegacyContextX86		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x938, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_keycode		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x939, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_keycheck		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x940, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//
//#define IOCTL_NtReadVirtualMemory		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x941, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_NtWriteVirtualMemory		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x942, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_NtOpenProcess		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x943, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_KiAttachProcess		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x944, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//
//#define IOCTL_NtCreateDebugObject		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x895, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_NtWaitForDebugEvent		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x910, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_NtDebugContinue		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x909, METHOD_BUFFERED, FILE_ANY_ACCESS)
//#define IOCTL_NtDebugActiveProcess		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x894, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_NtRemoveProcessDebug		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x908, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_DbgLol		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x950, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//
//
//#define IOCTL_SwapContext_PatchXRstor		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x945, METHOD_BUFFERED, FILE_ANY_ACCESS)
//
//#define IOCTL_SwapContext		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x946, METHOD_BUFFERED, FILE_ANY_ACCESS)

#endif